#!/usr/bin/env python3
"""
Documentation Synchronization Script

This script synchronizes README.md files from the codebase to the /docs folder
according to the desired documentation structure.

Usage:
    python sync_docs.py [--dry-run]

Options:
    --dry-run    Show what would be done without making changes
"""

import os
import re
import sys
import shutil
import yaml
from pathlib import Path
from datetime import datetime

# Flag to indicate if this is a dry run (no changes will be made)
DRY_RUN = "--dry-run" in sys.argv

# Warning header to add to generated files
WARNING_HEADER = """<!--
WARNING: This file is automatically generated from {source_path}.
Do not edit this file directly. Make changes to the source README.md instead.
Last updated: {timestamp}
-->

"""

# Define the mapping between README.md files and their corresponding docs location
# This follows the structure outlined in the requirements
SYSTEM_MAPPING = {
    # Game
    "game/README.md": "docs/game/overview.md",
    "scripts/game/README.md": "docs/game/overview.md",
    "scripts/game/ContentInstantiationService.md": "docs/game/content_instantiation_service.md",
    "scripts/game/GameInitializer.md": "docs/game/game_initializer.md",
    
    # Environment System
    "environment/README.md": "docs/environment/overview.md",
    "scripts/environment/README.md": "docs/environment/overview.md",
    "environment/managers/EffectsManager.md": "docs/environment/effects_manager.md",
    "environment/managers/GroundVisualManager.md": "docs/environment/ground_visual_manager.md",
    "environment/managers/SharedGroundManager.md": "docs/environment/shared_ground_manager.md",
    "environment/theme/ThemeSystem.md": "docs/environment/theme_system.md",
    "environment/biome/BiomeSystem.md": "docs/environment/biome_system.md",
    "environment/debug/EnvironmentDebugOverlay.md": "docs/environment/debug_overlay.md",
    
    # Motion System
    "scripts/motion/README.md": "docs/motion/overview.md",
    "scripts/collision_materials/README.md": "docs/motion/collision_materials.md",
    "scripts/motion/subsystems/bounce_system/README.md": "docs/motion/bounce_system.md",
    "scripts/motion/subsystems/boost_system/README.md": "docs/motion/boost_system.md",
    "scripts/motion/subsystems/launch_system/README.md": "docs/motion/launch_system.md",
    "scripts/motion/subsystems/obstacle_system/README.md": "docs/motion/obstacle_system.md",
    "scripts/obstacles/README.md": "docs/motion/obstacle_system.md",
    
    # Camera System
    "camera/README.md": "docs/camera/overview.md",
    "camera/subsystems/follow/README.md": "docs/camera/follow_system.md",
    "camera/subsystems/zoom/README.md": "docs/camera/zoom_system.md",
    "camera/subsystems/slowmo/README.md": "docs/camera/slow_motion_system.md",
    "camera/debug/README.md": "docs/camera/debug.md",
    
    # Visual Background System
    "visual_background/README.md": "docs/visual_background/overview.md",
    "visual_background/debug/README.md": "docs/visual_background/debug.md",
    
    # Stage Composition System
    "scripts/stage/README.md": "docs/stage/overview.md",
    "stage/README.md": "docs/stage/overview.md",
    "scripts/stage/components/ChunkManagement.md": "docs/stage/chunk_management_system.md",
    "scripts/stage/content/ContentDistribution.md": "docs/stage/content_distribution_system.md",
    "scripts/stage/resources/StageConfig.md": "docs/stage/stage_config_system.md",
    "scripts/stage/strategies/FlowDifficulty.md": "docs/stage/flow_and_difficulty_controller.md",
    
    # Player System
    "scripts/player/README.md": "docs/player/overview.md",
    "player/README.md": "docs/player/overview.md",
    
    # Cross-Systems
    "scripts/README_DEPENDENCY_INJECTION.md": "docs/cross-systems/dependency_injection.md",
    "scripts/effects/README.md": "docs/cross-systems/effects.md"
}

# Define pattern-based mapping for automatic discovery of new README files
PATTERN_MAPPING = [
    # Pattern: source_pattern -> target_pattern
    (r"([^/]+)/README\.md", r"docs/\1/overview.md"),
    (r"([^/]+)/([^/]+)/README\.md", r"docs/\1/\2.md"),
    (r"scripts/motion/subsystems/([^/]+)/README\.md", r"docs/motion/\1.md"),
    (r"scripts/player/([^/]+)/README\.md", r"docs/player/\1.md"),
    (r"scripts/([^/]+)/README\.md", r"docs/\1/overview.md"),
    # Add more patterns as needed
]

# Define the navigation structure for mkdocs.yml
# This will be updated based on the files found
NAV_STRUCTURE = [
    {"Home": "index.md"},
    {"Game": [
        {"Overview": "game/overview.md"},
        {"Schema of all systems connected": "game/systems_schema.md"}
    ]},
    {"Environment System": [
        {"Overview": "environment/overview.md"},
        {"Effects Manager": "environment/effects_manager.md"},
        {"Ground Visual Manager": "environment/ground_visual_manager.md"},
        {"Shared Ground Manager": "environment/shared_ground_manager.md"},
        {"Theme System": "environment/theme_system.md"},
        {"Biome System": "environment/biome_system.md"}
    ]},
    {"Motion System": [
        {"Overview": "motion/overview.md"},
        {"Collision Materials": "motion/collision_materials.md"},
        {"Bounce System": "motion/bounce_system.md"},
        {"Boost System": "motion/boost_system.md"},
        {"Launch System": "motion/launch_system.md"},
        {"Obstacle System": "motion/obstacle_system.md"}
    ]},
    {"Camera System": [
        {"Overview": "camera/overview.md"},
        {"Follow System": "camera/follow_system.md"},
        {"Zoom System": "camera/zoom_system.md"},
        {"Slow Motion System": "camera/slow_motion_system.md"},
        {"Debug Tools": "camera/debug.md"}
    ]},
    {"Visual Background System": [
        {"Overview": "visual_background/overview.md"},
        {"Debug Tools": "visual_background/debug.md"}
    ]},
    {"Stage Composition System": [
        {"Overview": "stage/overview.md"},
        {"Chunk Management System": "stage/chunk_management_system.md"},
        {"Content Distribution System": "stage/content_distribution_system.md"},
        {"Stage Config System": "stage/stage_config_system.md"},
        {"Flow and Difficulty Controller": "stage/flow_and_difficulty_controller.md"}
    ]},
    {"Player System": [
        {"Overview": "player/overview.md"}
    ]},
    {"Cross-Systems": [
        {"Dependency Injection": "cross-systems/dependency_injection.md"},
        {"Effects": "cross-systems/effects.md"}
    ]}
]

def find_readme_files():
    """Find all README.md files in the codebase."""
    readme_files = []
    for root, _, files in os.walk("."):
        # Skip the docs directory and hidden directories
        if "/docs/" in root + "/" or root.startswith("./docs") or "/." in root:
            continue
        
        for file in files:
            if file.endswith("README.md") or file == "README_DEPENDENCY_INJECTION.md":
                readme_path = os.path.join(root, file)
                # Convert to relative path with forward slashes
                readme_path = readme_path.replace("\\", "/")
                if readme_path.startswith("./"):
                    readme_path = readme_path[2:]
                readme_files.append(readme_path)
    
    return readme_files

def map_readme_to_docs(readme_path):
    """Map a README.md file to its corresponding location in /docs."""
    # Check if there's a direct mapping
    if readme_path in SYSTEM_MAPPING:
        return SYSTEM_MAPPING[readme_path]
    
    # Try pattern-based mapping
    for pattern, target in PATTERN_MAPPING:
        match = re.match(pattern, readme_path)
        if match:
            return re.sub(pattern, target, readme_path)
    
    # Default mapping: place in the same relative directory under docs
    docs_path = os.path.join("docs", os.path.dirname(readme_path), 
                            os.path.basename(readme_path))
    docs_path = docs_path.replace("\\", "/")
    
    return docs_path

def copy_readme_to_docs(readme_path, docs_path):
    """Copy a README.md file to its corresponding location in /docs with a warning header."""
    # Create the target directory if it doesn't exist
    os.makedirs(os.path.dirname(docs_path), exist_ok=True)
    
    # Read the README content
    with open(readme_path, "r", encoding="utf-8") as f:
        content = f.read()
    
    # Add the warning header
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    header = WARNING_HEADER.format(source_path=readme_path, timestamp=timestamp)
    content_with_header = header + content
    
    # Write to the docs file
    if not DRY_RUN:
        with open(docs_path, "w", encoding="utf-8") as f:
            f.write(content_with_header)
        print(f"Copied {readme_path} to {docs_path}")
    else:
        print(f"Would copy {readme_path} to {docs_path}")

def find_orphaned_docs():
    """Find .md files in /docs that don't correspond to a README.md in the codebase."""
    # Get all .md files in /docs
    docs_files = []
    for root, _, files in os.walk("docs"):
        for file in files:
            if file.endswith(".md"):
                docs_path = os.path.join(root, file)
                # Convert to relative path with forward slashes
                docs_path = docs_path.replace("\\", "/")
                docs_files.append(docs_path)
    
    # Get all mapped docs paths
    readme_files = find_readme_files()
    mapped_docs = [map_readme_to_docs(readme) for readme in readme_files]
    
    # Find orphaned docs
    orphaned_docs = []
    for docs_file in docs_files:
        if docs_file not in mapped_docs and docs_file != "docs/index.md":
            orphaned_docs.append(docs_file)
    
    return orphaned_docs

def remove_orphaned_docs(orphaned_docs):
    """Remove orphaned .md files from /docs."""
    for docs_file in orphaned_docs:
        if not DRY_RUN:
            os.remove(docs_file)
            print(f"Removed orphaned file: {docs_file}")
        else:
            print(f"Would remove orphaned file: {docs_file}")

def update_mkdocs_nav():
    """Update the navigation structure in mkdocs.yml based on the files found."""
    # Read the current mkdocs.yml
    with open("mkdocs.yml", "r", encoding="utf-8") as f:
        mkdocs_config = yaml.safe_load(f)
    
    # Get all mapped docs paths
    readme_files = find_readme_files()
    mapped_docs = [map_readme_to_docs(readme) for readme in readme_files]
    
    # Generate navigation structure based on the files found
    nav_structure = [{"Home": "index.md"}]
    
    # Helper function to add a file to the navigation structure
    def add_to_nav(path, title=None):
        # Skip index.md as it's already in the nav
        if path == "docs/index.md":
            return
        
        # Remove the "docs/" prefix
        if path.startswith("docs/"):
            path = path[5:]
        
        # Extract the section and subsection from the path
        parts = path.split("/")
        section = parts[0].title()
        
        # Skip README.md in the root directory
        if path == "README.md":
            return
        
        # Convert section names to match the desired structure
        section_mapping = {
            "Cross-Systems": "Cross-Systems",
            "Motion": "Motion System",
            "Camera": "Camera System",
            "Environment": "Environment System",
            "Visual_background": "Visual Background System",
            "Visual-background": "Visual Background System",
            "Visual_Background": "Visual Background System",
            "Stage": "Stage Composition System",
            "Player": "Player System",
            "Game": "Game"
        }
        
        if section in section_mapping:
            section = section_mapping[section]
        
        # Find or create the section in the nav
        section_entry = None
        for entry in nav_structure:
            if isinstance(entry, dict) and section in entry:
                section_entry = entry
                break
        
        if section_entry is None:
            section_entry = {section: []}
            nav_structure.append(section_entry)
        
        # Determine the title and path for the nav entry
        if len(parts) == 1:
            # Root level file (e.g., "section.md")
            nav_title = "Overview" if title is None else title
            nav_path = path
        else:
            # Subsection file (e.g., "section/subsection.md")
            if parts[-1] == "overview.md":
                nav_title = "Overview" if title is None else title
            else:
                # Convert filename to title (e.g., "bounce_system.md" -> "Bounce System")
                filename = parts[-1].replace(".md", "")
                nav_title = " ".join(word.title() for word in filename.split("_"))
                if title is not None:
                    nav_title = title
            nav_path = path
        
        # Add the entry to the section
        section_entry[section].append({nav_title: nav_path})
    
    # Add all mapped docs to the navigation structure
    for path in sorted(mapped_docs):
        add_to_nav(path)
    
    # Sort the sections in the desired order
    section_order = [
        "Home",
        "Game",
        "Environment System",
        "Motion System",
        "Camera System",
        "Visual Background System",
        "Stage Composition System",
        "Player System",
        "Cross-Systems"
    ]
    
    # Sort the nav structure based on the section order
    sorted_nav = []
    for section in section_order:
        for entry in nav_structure:
            if isinstance(entry, dict) and section in entry:
                sorted_nav.append(entry)
                break
    
    # Add any remaining sections that weren't in the section_order
    for entry in nav_structure:
        if isinstance(entry, dict):
            section = list(entry.keys())[0]
            if section not in section_order:
                sorted_nav.append(entry)
    
    # Update the navigation structure
    mkdocs_config["nav"] = sorted_nav
    
    # Write the updated mkdocs.yml
    if not DRY_RUN:
        with open("mkdocs.yml", "w", encoding="utf-8") as f:
            yaml.dump(mkdocs_config, f, default_flow_style=False, sort_keys=False)
        print("Updated mkdocs.yml navigation structure")
    else:
        print("Would update mkdocs.yml navigation structure")

def main():
    """Main function to synchronize README.md files to /docs."""
    print("Starting documentation synchronization...")
    
    if DRY_RUN:
        print("DRY RUN: No changes will be made")
    
    # Find all README.md files
    readme_files = find_readme_files()
    print(f"Found {len(readme_files)} README.md files")
    
    # Copy README.md files to /docs
    for readme_path in readme_files:
        docs_path = map_readme_to_docs(readme_path)
        copy_readme_to_docs(readme_path, docs_path)
    
    # Find and remove orphaned docs
    orphaned_docs = find_orphaned_docs()
    if orphaned_docs:
        print(f"Found {len(orphaned_docs)} orphaned .md files in /docs")
        remove_orphaned_docs(orphaned_docs)
    else:
        print("No orphaned .md files found in /docs")
    
    # Update mkdocs.yml navigation
    update_mkdocs_nav()
    
    print("Documentation synchronization complete!")

if __name__ == "__main__":
    main()
